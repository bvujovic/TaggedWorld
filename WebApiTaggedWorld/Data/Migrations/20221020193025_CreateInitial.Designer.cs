// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApiTaggedWorld.Data;

#nullable disable

namespace WebApiTaggedWorld.Migrations
{
    /// <summary></summary>
    [DbContext(typeof(DataContext))]
    [Migration("20221020193025_CreateInitial")]
    partial class CreateInitial
    {
        /// <summary></summary>
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("TaggedWorldLibrary.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StrTags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GroupId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("TaggedWorldLibrary.Member", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("TaggedWorldLibrary.Sharing", b =>
                {
                    b.Property<int>("TargetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SharedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TargetId", "GroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Sharing");
                });

            modelBuilder.Entity("TaggedWorldLibrary.Target", b =>
                {
                    b.Property<int>("TargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AccessedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StrTags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserAccessedId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserModifiedId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserOwnerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TargetId");

                    b.HasIndex("UserAccessedId");

                    b.HasIndex("UserModifiedId");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("Targets");
                });

            modelBuilder.Entity("TaggedWorldLibrary.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasAlternateKey("Email");

                    b.HasAlternateKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaggedWorldLibrary.Member", b =>
                {
                    b.HasOne("TaggedWorldLibrary.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaggedWorldLibrary.User", "User")
                        .WithMany("MemberOf")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaggedWorldLibrary.Sharing", b =>
                {
                    b.HasOne("TaggedWorldLibrary.Group", "Group")
                        .WithMany("Sharings")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaggedWorldLibrary.Target", "Target")
                        .WithMany("Sharings")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaggedWorldLibrary.User", "User")
                        .WithMany("Sharings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Target");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaggedWorldLibrary.Target", b =>
                {
                    b.HasOne("TaggedWorldLibrary.User", "UserAccessed")
                        .WithMany("AccessedTargets")
                        .HasForeignKey("UserAccessedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaggedWorldLibrary.User", "UserModified")
                        .WithMany("ModifiedTargets")
                        .HasForeignKey("UserModifiedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaggedWorldLibrary.User", "UserOwner")
                        .WithMany("OwnedTargets")
                        .HasForeignKey("UserOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccessed");

                    b.Navigation("UserModified");

                    b.Navigation("UserOwner");
                });

            modelBuilder.Entity("TaggedWorldLibrary.Group", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Sharings");
                });

            modelBuilder.Entity("TaggedWorldLibrary.Target", b =>
                {
                    b.Navigation("Sharings");
                });

            modelBuilder.Entity("TaggedWorldLibrary.User", b =>
                {
                    b.Navigation("AccessedTargets");

                    b.Navigation("MemberOf");

                    b.Navigation("ModifiedTargets");

                    b.Navigation("OwnedTargets");

                    b.Navigation("Sharings");
                });
#pragma warning restore 612, 618
        }
    }
}
